
#include "TFile.h"
#include "TTree.h"
#include "TGraph.h"
#include "TH1D.h"
#include "TStyle.h"
#include "TPaveText.h"
#include <TLine.h>
#include <TText.h>
#include <TLatex.h>
#include <TSystem.h>
#include <TCanvas.h>
#include <TROOT.h>
#include "TKey.h"
#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <sstream>

// Get memory cell from bin number and fcr
int get_cell(int bin_no, int fcr) {
    int cell = bin_no;
    if (cell + fcr < 1024) { // order bins by cell
        cell = cell + fcr;
    } else {
        cell = cell + fcr - 1024;
    }
    return cell;
}

// Reverse of get_cell (get bin from cell)
int get_bin(int cell, int fcr) {
    int bin_no = cell;
    if (bin_no >= fcr) {
        bin_no -= fcr;
    } else {
        bin_no = 1024 + bin_no - fcr;
    }
    return bin_no;
}

// Function to open and read the CSV file
void open_csv_file(const std::string& filename, std::vector<int>& csv_om_index, std::vector<int>& csv_mem_index, std::vector<double>& csv_calib_const) {
    std::ifstream file(filename);

    if (!file.is_open()) {
        std::cout << "Error: Could not open CSV file!" << std::endl;
        return;
    }
    
    std::string line;
    int lineNumber = 0;
    
    // Skip the header line
    std::getline(file, line);  // Read and discard the header

    // Read and process up to line 1025
    while (std::getline(file, line) && lineNumber < 1024) {
        lineNumber++;

        std::istringstream ss(line);
        std::string value;
        int columnIndex = 0;
        int memIndex = -1;
        double calibConst = 0.0;
        int om_index = -1;

        // Parse the CSV line and extract columns D (index 3) and E (index 4)
        while (std::getline(ss, value, ',')) {
            if (columnIndex == 2) {  // Column C (om_number)
                om_index = std::stoi(value);
            }
            if (columnIndex == 3) {  // Column D (mem_index)
                memIndex = std::stoi(value);
            }
            if (columnIndex == 4) {  // Column E (calib_const)
                calibConst = std::stod(value);
            }
            columnIndex++;
        }

        if (memIndex != -1) {
            csv_mem_index.push_back(memIndex);
        }
        csv_calib_const.push_back(calibConst);
        csv_om_index.push_back(om_index);
    }
    
    std::cout << "CSV file opened successfully: " << filename << std::endl;
    file.close();
}

// Function to process wave bin and apply calibration
short process_wave_bin(int wave_bin, short wave_value, int fcr, 
                       const std::vector<int>& csv_mem_index, 
                       const std::vector<double>& csv_calib_const) {
    int memory_cell = get_cell(wave_bin, fcr);

    // Adjust for CSV file's 1-based indexing
    if (memory_cell > 0) {
        memory_cell -= 1;  // Convert to 0-based indexing
    }

    // Ensure memory_cell is within bounds
    if (memory_cell < 0 || memory_cell >= csv_mem_index.size()) {
        std::cerr << "Error: Memory cell index out of bounds. Memory cell: " << memory_cell << std::endl;
        return wave_value;  // Return the uncalibrated value if out of bounds
    }

    // Retrieve the memory cell index and calibration constant from the CSV data
    int memory_cell_index = csv_mem_index[memory_cell];
    double calibration_constant = csv_calib_const[memory_cell_index];

    // Apply the calibration to the waveform value
    short calibrated_value = wave_value - calibration_constant;

    return calibrated_value;
}

// Function to plot and save pre and post-calibrated waveforms for each event
void waveform_tree_to_images(const std::vector<int>& event_numbers) {
    std::vector<int> csv_om_index;
    std::vector<int> csv_mem_index;
    std::vector<double> csv_calib_const;

    open_csv_file("calibration_output.csv", csv_om_index, csv_mem_index, csv_calib_const);

    if (csv_mem_index.empty() || csv_calib_const.empty()) {
        std::cout << "Error: Failed to load calibration data from CSV!" << std::endl;
        return;
    }

    // Open the ROOT file containing the waveforms
    TFile* file = TFile::Open("filtered_gamma_fcr.root", "READ");
    if (!file || file->IsZombie()) {
        std::cout << "Error: Could not open input file!" << std::endl;
        return;
    }

    TTree* tree = (TTree*)file->Get("Result_tree");
    if (!tree) {
        std::cout << "Error: Could not find tree in file!" << std::endl;
        file->Close();
        return;
    }

    std::vector<int>* om_number = nullptr;
    std::vector<int>* is_electron = nullptr;
    std::vector<double>* feb_energy = nullptr;
    std::vector<int>* feb_charge = nullptr;
    std::vector<std::vector<short>>* wave = nullptr;
    std::vector<int>* feb_amplitude = nullptr;
    std::vector<int>* calo_fcr = nullptr;

    tree->SetBranchAddress("om_number", &om_number);
    tree->SetBranchAddress("is_electron", &is_electron);
    tree->SetBranchAddress("energy", &feb_energy);
    tree->SetBranchAddress("charge", &feb_charge);
    tree->SetBranchAddress("wave", &wave);
    tree->SetBranchAddress("amplitude", &feb_amplitude);
    tree->SetBranchAddress("calo_fcr", &calo_fcr);

    int nEntries = tree->GetEntries();
    for (int i = 0; i < nEntries; ++i) {
        if (std::find(event_numbers.begin(), event_numbers.end(), i) == event_numbers.end()) {
            continue;  // Skip events not in the list
        }

        tree->GetEntry(i);

        // Create the canvas for plotting the waveforms
        TCanvas* canvas = new TCanvas("canvas", "Waveform Calibration", 800, 600);
        canvas->Divide(2, 1);  // Divide canvas into 2 sub-pads (one for each waveform)

        for (size_t j = 0; j < is_electron->size(); ++j) {
            int fcr = calo_fcr->at(j);
            int om_num = om_number->at(j);

            if (om_num != 124) continue;  // Only process a specific OM number (124)

            std::vector<short> current_wave = wave->at(j);
            size_t wave_size = current_wave.size();

            // Prepare arrays for pre-calibrated and post-calibrated waveforms
            double* pre_calib = new double[wave_size];
            double* post_calib = new double[wave_size];
            double* bin_array = new double[wave_size];
            
            // Fill the pre-calibrated and post-calibrated waveforms
            for (size_t bin = 0; bin < wave_size; ++bin) {
                pre_calib[bin] = current_wave[bin];
                post_calib[bin] = process_wave_bin(bin + 1, current_wave[bin], fcr, csv_mem_index, csv_calib_const);  // +1 to relabel the bin
                bin_array[bin] = bin + 1;  // Bins are relabeled to 1-based indexing
            }

            // Draw the pre-calibrated waveform
            canvas->cd(1);  // First sub-pad
            TGraph* pre_graph = new TGraph(wave_size, bin_array, pre_calib);
            pre_graph->SetTitle("Pre-Calibrated Waveform;Bin;Amplitude");
            pre_graph->SetLineColor(kRed);
            pre_graph->Draw("AL");

            // Draw the post-calibrated waveform
            canvas->cd(2);  // Second sub-pad
            TGraph* post_graph = new TGraph(wave_size, bin_array, post_calib);
            post_graph->SetTitle("Post-Calibrated Waveform;Bin;Amplitude");
            post_graph->SetLineColor(kBlue);
            post_graph->Draw("AL");

            // Update canvas to show the plots
            canvas->Update();

            // Save the canvas with the event number in the filename
            std::string output_filename = "calibrated_waveform_event_" + std::to_string(i) + ".png";
            canvas->SaveAs(output_filename.c_str());  // Save with unique filename for each event
        }
    }

    file->Close();
}

int main() {
    // List of event numbers you want to process
    std::vector<int> event_numbers = {796, 6536, 8028};

    // Process and save the waveforms for the given events
    waveform_tree_to_images(event_numbers);

    return 0;
}
